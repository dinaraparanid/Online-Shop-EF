CREATE TABLE IF NOT EXISTS Price (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    price TEXT NOT NULL,
    discount INTEGER NOT NULL,
    priceWithDiscount TEXT NOT NULL,
    unit TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS Feedback (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    count INTEGER NOT NULL,
    rating REAL NOT NULL
);

CREATE TABLE IF NOT EXISTS Tag (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    value TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS Info (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    title TEXT NOT NULL,
    value TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS Cover (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    url TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS Favourite (
    id TEXT PRIMARY KEY,
    title TEXT NOT NULL,
    subtitle TEXT NOT NULL,
    priceId INTEGER NOT NULL,
    feedbackId INTEGER NOT NULL,
    available INTEGER NOT NULL,
    description TEXT NOT NULL,
    ingredients TEXT NOT NULL,

    FOREIGN KEY (priceId) REFERENCES Price(id) ON DELETE CASCADE,
    FOREIGN KEY (feedbackId) REFERENCES Feedback(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS FavouriteTag (
    favouriteId TEXT NOT NULL,
    tagId Integer NOT NULL,

    PRIMARY KEY (favouriteId, tagId),
    FOREIGN KEY (favouriteId) REFERENCES Favourite(id) ON DELETE CASCADE,
    FOREIGN KEY (tagId) REFERENCES Tag(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS FavouriteInfo (
    favouriteId TEXT NOT NULL,
    infoId INTEGER NOT NULL,

    PRIMARY KEY (favouriteId, infoId),
    FOREIGN KEY (favouriteId) REFERENCES Favourite(id) ON DELETE CASCADE,
    FOREIGN KEY (infoId) REFERENCES Info(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS FavouriteCover (
    favouriteId TEXT NOT NULL,
    coverId INTEGER NOT NULL,

    PRIMARY KEY (favouriteId, coverId),
    FOREIGN KEY (favouriteId) REFERENCES Favourite(id) ON DELETE CASCADE,
    FOREIGN KEY (coverId) REFERENCES Cover(id) ON DELETE CASCADE
);

selectFavourites:
SELECT
    Favourite.id AS id,
    Favourite.title,
    Favourite.subtitle,
    Price.price,
    Price.discount,
    Price.priceWithDiscount,
    Price.unit,
    Feedback.count,
    Feedback.rating,
    Tag.value AS tag,
    Favourite.available,
    Favourite.description,
    Info.title AS infoTitle,
    Info.value AS infoValue,
    Favourite.ingredients,
    Cover.url AS coverUrl
FROM
    Favourite,
    Price,
    Feedback,
    Tag,
    FavouriteTag,
    Info,
    FavouriteInfo,
    Cover,
    FavouriteCover
WHERE
    Favourite.priceId = Price.id AND
    Favourite.feedbackId = Feedback.id AND
    Favourite.id = FavouriteTag.favouriteId AND
    Favourite.id = FavouriteInfo.favouriteId AND
    Favourite.id = FavouriteCover.favouriteId AND
    Tag.id = FavouriteTag.tagId AND
    Info.id = FavouriteInfo.infoId AND
    Cover.id = FavouriteCover.coverId;

insertPriceIfNotExists:
INSERT INTO Price (price, discount, priceWithDiscount, unit)
VALUES (?, ?, ?, ?);

insertedPriceId:
SELECT last_insert_rowid()
FROM Price
LIMIT 1;

insertFeedbackIfNotExists:
INSERT INTO Feedback (count, rating)
VALUES (?, ?);

insertedFeedbackId:
SELECT last_insert_rowid()
FROM Feedback
LIMIT 1;

insertTagIfNotExists:
INSERT INTO Tag (value)
VALUES (?);

insertedTagId:
SELECT last_insert_rowid()
FROM Tag
LIMIT 1;

insertInfoIfNotExists:
INSERT INTO Info (title, value)
VALUES (?, ?);

insertedInfoId:
SELECT last_insert_rowid()
FROM Info
LIMIT 1;

insertCoverIfNotExists:
INSERT INTO Cover (url)
VALUES (?);

insertedCoverId:
SELECT last_insert_rowid()
FROM Cover
LIMIT 1;

insertFavourite:
INSERT INTO Favourite (id, title, subtitle, priceId, feedbackId, available, description, ingredients)
VALUES (?, ?, ?, ?, ?, ?, ?, ?);

insertFavouriteTag:
INSERT INTO FavouriteTag (favouriteId, tagId)
VALUES (?, ?);

insertFavouriteInfo:
INSERT INTO FavouriteInfo (favouriteId, infoId)
VALUES (?, ?);

insertFavouriteCover:
INSERT INTO FavouriteCover (favouriteId, coverId)
VALUES (?, ?);

removeFavourite:
DELETE FROM Favourite
WHERE Favourite.id = ?;
